
Counting Name Popularity
Let's group on name, then count how many people have each name:

db.counter.aggregate(
  {
    $group: {
      _id: {
        name: '$ip'
      },
      count: {
        $sum: 1
      }
    }
  }
)



https://www.baeldung.com/mongodb-tagging

.append("versions", Arrays.asList("v3.2", "v3.0", "v2.6"))
new Document().append("a", "MongoDB")
              .append("b", Arrays.asList(1, 2));

db.links.find( { tags: { $all: [ 1 ] } } )

https://mongodb.github.io/mongo-java-driver/3.8/builders/filters/

https://examples.javacodegeeks.com/software-development/mongodb/mongodb-array-query-operators-example/
db.survey.find( { results: { $elemMatch: { product: "xyz", score: { $gte: 8 } } } } )

db.inventory.find( { tags: { $all: [ "appliance", "school", "book" ] } } )

db.links.find( { tags: { $all: [ 0 ] } } )

http://www.javahotchocolate.com/notes/mongodb-crud.html

db.links.insertMany([
   {title: '0000', description: 'description0000', image: 'image0000', url: 'url0000',tags: [0, 1, 4],   postedon: new Date(Date.now()),insertedby: 1},
   {title: '1111', description: 'description1111', image: 'image1111', url: 'url1111',tags: [0, 1, 2],   postedon: new Date(Date.now()),insertedby: 7},
   {title: '2222', description: 'description2222', image: 'image2222', url: 'url2222',tags: [5, 1, 2],   postedon: new Date(Date.now()),insertedby: 2},
   {title: '3333', description: 'description3333', image: 'image3333', url: 'url3333',tags: [0, 2],   postedon: new Date(Date.now()),insertedby: 4},
   {title: '4444', description: 'description4444', image: 'image4444', url: 'url4444',tags: [1, 2],   postedon: new Date(Date.now()),insertedby: 2},
   ])



https://www.journaldev.com/6178/mongodb-find#mongodb-find-in-array

https://mongodb.github.io/mongo-java-driver/3.4/driver/getting-started/quick-start/
Document doc = new Document("name", "MongoDB")
                .append("type", "database")
                .append("count", 1)
                .append("versions", Arrays.asList("v3.2", "v3.0", "v2.6"))
                .append("info", new Document("x", 203).append("y", 102));

				
new BasicDBObject("regno", 75)
				
Mongo Statistics:   
http://zetcode.com/db/mongodbjava/

Tutorials:
https://mongodb-documentation.readthedocs.io/en/latest/ecosystem/tutorial/getting-started-with-java-driver.html

........................................
MongoDB Skip() Method
Apart from limit() method, there is one more method skip() which also accepts number type argument and is used to skip the number of documents.

Syntax
The basic syntax of skip() method is as follows âˆ’

>db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)


........................................

cursor.sort(new BasicDBObject("_id", -1));
cursor.limit(limit);


Use .limit()

db.foo.find().limit(50);
Or if you want to sort and then get last records then you can do

db.foo.find().sort({_id:1}).limit(50);  and -1 for descending.


........................................

It is the new syntax in MongoDB version 3, therefore I could not use the suggested answer . So the working code is as follows:

MongoCollection<Document> coll = db.getCollection(<collectionName>);

FindIterable<Document> currentVersionDocumentIterable =   
    coll.find().sort(new Document("_id", -1)).limit(50);

........................................

db.customers.find();

db.counter.find().sort({_id:1}).limit(50);


db.counter.aggregate(
  {
    $group: {
      "ip": 1,
      count: {
        $sum: 1
      }
    }
  }
);

db.counter.find().count();

Login Search Comments Support Groups Court Opinions In the Media Parental Rights
Parental Alienation
Home
   
Parental Rights	In the Media	Court Opinions	Support Groups
Added June 5th, 2019
https://stackoverflow.com/questions/24483727/how-to-insert-a-document-with-date-in-mongo

db.links.insert({
   url: 'http://www.tutorialspoint.com',
   title: 'MongoDB Overview', 
   description: 'MongoDB is no sql database',
   image: 'https://www.somesample.com/',
   tags: ['mongodb', 'database', 'NoSQL'],
   isize: [1,1],
   date: new Date(Date.now()),
   user: 2
})


url
title
desc
imageUrl
display_height
display_width

mongoClient = new MongoClient("db");
Document 
MongoCollection<Document> collection = mongodb.getCollection("customers");
 mongodb.getCollection("customers").insert(new org.bson.Document("url", url)
				.append("title", title)
				.append("desc", desc)
				.append("imageUrl", imageUrl)
				.append("display_height", display_height)
				.append("display_width", display_width)
				.append("comment", comment)
				.append("userID", userID)
				.append("date", new Date());




db.links.insertMany([
   {title: '0000', description: 'description0000', image: 'image0000', url: 'url0000',tags: ['0', 'database', 'xml'],   postedon: new Date(Date.now()),insertedby: 2},
   {title: '1111', description: 'description1111', image: 'image1111', url: 'url1111',tags: ['0', 'database', 'NoSQL'],   postedon: new Date(Date.now()),insertedby: 2},
   {title: '2222', description: 'description2222', image: 'image2222', url: 'url2222',tags: ['apache', 'database', 'NoSQL'],   postedon: new Date(Date.now()),insertedby: 2},
   {title: '3333', description: 'description3333', image: 'image3333', url: 'url3333',tags: ['0', 'NoSQL'],   postedon: new Date(Date.now()),insertedby: 2},
   {title: '4444', description: 'description4444', image: 'image4444', url: 'url4444',tags: ['database', 'NoSQL'],   postedon: new Date(Date.now()),insertedby: 2},
   ])



db.links.find( { tags: "mongodb" } )

db.products.find().sort({"created_at": 1}) --- 1 for asc and -1 for desc


.sort({"postedon": -1})


#java
myDoc.put("value","someValue");
myDoc.put("timestamp", new Date());
myCollection.insert(myDoc);

..............

##### COUNT BY IP ######
db.counter.aggregate([
    {"$group" : {_id:"$ip", count:{$sum:1}}}, 
	{$sort:{"_id.source":1}}	
])

db.counter.aggregate([
	{"$group" : 
		{_id:"$ip", count:{$sum:1}}
	}, 
	{$sort:{"count":-1}}
])

###### SORTING ######

db.products.find().sort({"created_at": 1})

limit the result set:  .limit(50);

db.yourcollectionname.find({$query: {}, $orderby: {$natural : -1}}).limit(yournumber)

###### FIND BY VALUE ######
.... { "_id": "bananas", "qty": 7 }


http://mongodb.github.io/mongo-java-driver/3.4/driver/getting-started/quick-start/
https://howtodoinjava.com/mongodb/mongodb-find-documents/

##### JAVA EXAMPLES #####
MongoClient mongoClient = new MongoClient( "localhost" , 27017 );
MongoDatabase database = mongoClient.getDatabase(db_name);
MongoCollection<Document> collection = database.getCollection(collection_name);
String value  = collection.find().projection(Projections.include("item")).first().getString("item");


To create the document using the Java driver
 Document doc = new Document("name", "MongoDB")
                .append("type", "database")
                .append("count", 1)
                .append("versions", Arrays.asList("v3.2", "v3.0", "v2.6"))
                .append("info", new Document("x", 203).append("y", 102));
				
collection.insertOne(doc);				
				
#Matches a Filter			
myDoc = collection.find(eq("i", 71)).first();
System.out.println(myDoc.toJson());			
		

#Select document using where clause
private static void selectSingleRecordAndFieldByRecordNumber(DBCollection collection)
{
    BasicDBObject whereQuery = new BasicDBObject();
    whereQuery.put("employeeId", 5);
    BasicDBObject fields = new BasicDBObject();
    fields.put("employeeId", 1);
  
    DBCursor cursor = collection.find(whereQuery, fields);
    while (cursor.hasNext()) {
        System.out.println(cursor.next());
    }
}

#Find by document id
private static void selectAllRecordByRecordNumber(DBCollection collection)
{
    BasicDBObject whereQuery = new BasicDBObject();
    whereQuery.put("employeeId", 5);
    DBCursor cursor = collection.find(whereQuery);
    while(cursor.hasNext()) {
        System.out.println(cursor.next());
    }
}

#MongoDb find documents matching multiple fields example
#Find documents matching multiple fields
private static void andLogicalComparison_Example(DBCollection collection)
{
    BasicDBObject andQuery = new BasicDBObject();
    List<BasicDBObject> obj = new ArrayList<BasicDBObject>();
    obj.add(new BasicDBObject("employeeId", 2));
    obj.add(new BasicDBObject("employeeName", "TestEmployee_2"));
    andQuery.put("$and", obj);
  
    System.out.println(andQuery.toString());
  
    DBCursor cursor = collection.find(andQuery);
    while (cursor.hasNext()) {
        System.out.println(cursor.next());
    }
}



##### (full) TEXT SEARCH #####
https://code.tutsplus.com/tutorials/full-text-search-in-mongodb--cms-24835
https://stackoverflow.com/questions/44833817/mongodb-full-and-partial-text-search
https://docs.mongodb.com/manual/core/index-text/

https://docs.mongodb.com/manual/text-search/

https://examples.javacodegeeks.com/software-development/mongodb/mongodb-full-text-search-tutorial/


2.1 Enabling Text Search
Initially, Text Search was an experimental feature but starting from version 2.4, this configuration is enabled by default. But if you are using the previous version of MongoDB, the following code shows how this can be done:

Enable Text Search Command

> db.adminCommand({setParameter:true,textSearchEnabled:true})

2.2 Creating Text Index
Consider the following document under the articles collection containing the id and subject fields,
* We will create a text index on subject field so that we can we can perform a search operation.
> db.articles.ensureIndex({subject:"text"});
....................................................................
2.3.1 $search: "coffee"
This query returns the documents that contain the term coffee in the indexed subject field.

Query 1

> db.articles.find({$text: {$search: "coffee" }});
....................................................................
2.3.2 $search: "bake coffee cake"
This query returns documents that contain either bake or coffee or cake in the indexed subject field, or more precisely, the stemmed version of these words (e.g. bake, baking, baked).

Query 2

> db.articles.find({ $text: {$search: "bake coffee cake"}});
....................................................................
2.3.3 $search: "\"coffee shop\""
This query returns documents that contain the phrase coffee shop.

Query 3

> db.articles.find({ $text: {$search: "\"coffee shop\"" }});
....................................................................
2.3.4 $search: "coffee -shop"
This query returns documents that contain the phrase coffee -shop.

Query 4

> db.articles.find({ $text: {$search: "coffee -shop"}});
....................................................................
2.3.5 Case Sensitive Search â€“ $search: "Coffee"
This query performs a case sensitive search for the term Coffee. It may impact your search performance if $caseSensitive : true.

Query 5

> db.articles.find({ $text: {$search: "Coffee", $caseSensitive: true}});
....................................................................
2.3.6 Diacritic Sensitive Search â€“ $search: "CAFÃ‰"
This query performs a diacritic sensitive text search on the term CAFÃ‰.

Query 6

> db.articles.find({$text:{ $search: "CAFÃ‰", $diacriticSensitive: true }});
....................................................................
2.4 Deleting Text Index
To delete an existing text index, first find the name of the index using the below query.

Finding Index Name

> db.articles.getIndexes();
....................................................................
After getting the name of the index from the above query, run the below command. Here, subject_text is the name of the index.

Deleting Index

> db.articles.dropIndex("subject_text");

....................................................................


....................................................................


....................................................................























	
javascript; 
collection.find({}, {"sort" : ['datefield', 'asc']} ).toArray(function(err,docs) {});